// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DD365E2E.UITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DD365TradeTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "DD365"};
        
#line 1 "Trade.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DD365 Trade Tests", "\tAs a user I should be able to login to dealer daily portal and Trade a vehicle", ProgrammingLanguage.CSharp, new string[] {
                        "DD365"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DD365 Trade Tests")))
            {
                global::DD365E2E.UITests.Features.DD365TradeTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(1) As a dealer I should be able to access DD365 Login Page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:01")]
        public virtual void _1AsADealerIShouldBeAbleToAccessDD365LoginPage()
        {
            string[] tagsOfScenario = new string[] {
                    "tc:01"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(1) As a dealer I should be able to access DD365 Login Page", null, tagsOfScenario, argumentsOfScenario);
#line 6
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  testRunner.Given("I am at the DD365 login page for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
  testRunner.When("I enter username and password to login for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
  testRunner.Then("I should land to home page for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void _3AsADealerIShouldBeAbleToTradeVechicleFromInventoryPage(string testCase, string vIN, string catg, string dealerToTrade, string dealerNote, string tradePopupRequired, string expectedTrade, string tradeType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:03"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("VIN", vIN);
            argumentsOfScenario.Add("Catg", catg);
            argumentsOfScenario.Add("DealerToTrade", dealerToTrade);
            argumentsOfScenario.Add("DealerNote", dealerNote);
            argumentsOfScenario.Add("TradePopupRequired", tradePopupRequired);
            argumentsOfScenario.Add("ExpectedTrade", expectedTrade);
            argumentsOfScenario.Add("TradeType", tradeType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(3) As a dealer I should be able to Trade vechicle from Inventory Page", null, tagsOfScenario, argumentsOfScenario);
#line 17
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
  testRunner.When(string.Format("I search for a Category: \"{0}\" Vin : \"{1}\" to trade", catg, vIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
  testRunner.Then("I should see searched vehicle on the Inventory page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
  testRunner.When(string.Format("I select the Trade link based on Expected Trade \"{0}\"", tradePopupRequired), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
  testRunner.Then(string.Format("I should be able to see Trade Vehicle popup window based on Expected Trade \"{0}\"", tradePopupRequired), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
  testRunner.When(string.Format("I enter trade to dealer \"{0}\" and note \"{1}\" and Click Trade", dealerToTrade, dealerNote), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
  testRunner.Then(string.Format("I should see \"{0}\" message for Category : \"{1}\" vehicle", expectedTrade, catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
  testRunner.When("I click to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
  testRunner.Then("I should land to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
  testRunner.And(string.Format("I should see traded vehicle \"{0}\" listed on Trade Summary Page with Trade Type \"{" +
                            "1}\"", vIN, tradeType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
  testRunner.And(string.Format("I should see traded vehicle \"{0}\" listed on Trade Summary Page with Comments \"{1}" +
                            "\"", vIN, dealerNote), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
  testRunner.Then("I should be re-route to Inventory Page via Detail Page if Back to Inventory link " +
                        "is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(3) As a dealer I should be able to Trade vechicle from Inventory Page: TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "4T1C11AK9LU889308")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "G")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "TestNote1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "Trade successful")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradeType", "SENT")]
        public virtual void _3AsADealerIShouldBeAbleToTradeVechicleFromInventoryPage_TC01()
        {
#line 17
 this._3AsADealerIShouldBeAbleToTradeVechicleFromInventoryPage("TC01", "4T1C11AK9LU889308", "G", "42095", "TestNote1", "Yes", "Trade successful", "SENT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(3) As a dealer I should be able to Trade vechicle from Inventory Page: TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "JTDEPMAE2MJ149979")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "TestNote2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "Trade successful")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradeType", "SENT")]
        public virtual void _3AsADealerIShouldBeAbleToTradeVechicleFromInventoryPage_TC02()
        {
#line 17
 this._3AsADealerIShouldBeAbleToTradeVechicleFromInventoryPage("TC02", "JTDEPMAE2MJ149979", "A", "42095", "TestNote2", "Yes", "Trade successful", "SENT", ((string[])(null)));
#line hidden
        }
        
        public virtual void _4AsADealerIShouldBeAbleToSeeTradeNotPossibleMessageForCertainVehicles(string testCase, string vIN, string catg, string dealerToTrade, string dealerNote, string tradePopupRequired, string expectedTrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:04"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("VIN", vIN);
            argumentsOfScenario.Add("Catg", catg);
            argumentsOfScenario.Add("DealerToTrade", dealerToTrade);
            argumentsOfScenario.Add("DealerNote", dealerNote);
            argumentsOfScenario.Add("TradePopupRequired", tradePopupRequired);
            argumentsOfScenario.Add("ExpectedTrade", expectedTrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(4) As a dealer I should be able to see Trade not possible message for certain ve" +
                    "hicles", null, tagsOfScenario, argumentsOfScenario);
#line 42
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
  testRunner.When(string.Format("I search for a Category: \"{0}\" Vin : \"{1}\" to trade", catg, vIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
  testRunner.Then("I should see searched vehicle on the Inventory page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
  testRunner.When(string.Format("I select the Trade link based on Expected Trade \"{0}\"", tradePopupRequired), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
  testRunner.Then(string.Format("I should be able to see Trade Vehicle popup window based on Expected Trade \"{0}\"", tradePopupRequired), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
  testRunner.When(string.Format("I enter trade to dealer \"{0}\" and note \"{1}\" and Click Trade", dealerToTrade, dealerNote), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
  testRunner.Then(string.Format("I should see Trade is not possible \"{0}\" message for Category : \"{1}\" Vehicle", expectedTrade, catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
  testRunner.When("I click to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
  testRunner.Then("I should land to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
  testRunner.And(string.Format("I should not see traded vehicle \"{0}\" listed on Trade Summary Page due to their C" +
                            "ategory \"{1}\"", vIN, catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(4) As a dealer I should be able to see Trade not possible message for certain ve" +
            "hicles: TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "JF1ZNAE17L8752998")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "TestNote1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "Category F cannot be Traded")]
        public virtual void _4AsADealerIShouldBeAbleToSeeTradeNotPossibleMessageForCertainVehicles_TC01()
        {
#line 42
 this._4AsADealerIShouldBeAbleToSeeTradeNotPossibleMessageForCertainVehicles("TC01", "JF1ZNAE17L8752998", "F", "42095", "TestNote1", "Yes", "Category F cannot be Traded", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(4) As a dealer I should be able to see Trade not possible message for certain ve" +
            "hicles: TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "5YFEPMAE0MP165285")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "G")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "TestNote2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "STOCK TRADE NOT ALLOWED. UNIT NOT IN STOCK STATUS")]
        public virtual void _4AsADealerIShouldBeAbleToSeeTradeNotPossibleMessageForCertainVehicles_TC02()
        {
#line 42
 this._4AsADealerIShouldBeAbleToSeeTradeNotPossibleMessageForCertainVehicles("TC02", "5YFEPMAE0MP165285", "G", "42095", "TestNote2", "Yes", "STOCK TRADE NOT ALLOWED. UNIT NOT IN STOCK STATUS", ((string[])(null)));
#line hidden
        }
        
        public virtual void _5AsADealerIShouldNotBeAbleToTradeVechicleForCatgoryGJFJAndAJ(string testCase, string vIN, string catg, string dealerToTrade, string dealerNote, string tradePopupRequired, string expectedTrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:05"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("VIN", vIN);
            argumentsOfScenario.Add("Catg", catg);
            argumentsOfScenario.Add("DealerToTrade", dealerToTrade);
            argumentsOfScenario.Add("DealerNote", dealerNote);
            argumentsOfScenario.Add("TradePopupRequired", tradePopupRequired);
            argumentsOfScenario.Add("ExpectedTrade", expectedTrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(5) As a dealer I should not be able to Trade vechicle for catgory GJ, FJ, and AJ" +
                    "", null, tagsOfScenario, argumentsOfScenario);
#line 63
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
  testRunner.When(string.Format("I search for a Category: \"{0}\" Vin : \"{1}\" to trade", catg, vIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
  testRunner.Then("I should see searched vehicle on the Inventory page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
  testRunner.When(string.Format("I select Actions Menu for category \"{0}\"", catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
  testRunner.Then("I should not see Trade Option available within the Action Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
  testRunner.When("I click to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
  testRunner.Then("I should land to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
  testRunner.And(string.Format("I should not see traded vehicle \"{0}\" listed on Trade Summary Page due to their C" +
                            "ategory \"{1}\"", vIN, catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(5) As a dealer I should not be able to Trade vechicle for catgory GJ, FJ, and AJ" +
            ": TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "5TFDY5F14LX913136")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "GJ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "No Trade allowed")]
        public virtual void _5AsADealerIShouldNotBeAbleToTradeVechicleForCatgoryGJFJAndAJ_TC01()
        {
#line 63
 this._5AsADealerIShouldNotBeAbleToTradeVechicleForCatgoryGJFJAndAJ("TC01", "5TFDY5F14LX913136", "GJ", "42095", "", "No", "No Trade allowed", ((string[])(null)));
#line hidden
        }
        
        public virtual void _6AsADealerIShouldNotBeAbleToTradeVechicleWhichAreAlreadyTraded(string testCase, string vIN, string catg, string dealerToTrade, string dealerNote, string tradePopupRequired, string expectedTrade, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:06"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("VIN", vIN);
            argumentsOfScenario.Add("Catg", catg);
            argumentsOfScenario.Add("DealerToTrade", dealerToTrade);
            argumentsOfScenario.Add("DealerNote", dealerNote);
            argumentsOfScenario.Add("TradePopupRequired", tradePopupRequired);
            argumentsOfScenario.Add("ExpectedTrade", expectedTrade);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(6) As a dealer I should not be able to Trade vechicle which are already traded", null, tagsOfScenario, argumentsOfScenario);
#line 81
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
  testRunner.When(string.Format("I search for a Category: \"{0}\" Vin : \"{1}\" to trade", catg, vIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
  testRunner.Then("I should see searched vehicle on the Inventory page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
  testRunner.When(string.Format("I select Actions Menu for category \"{0}\" from Detail vehicle page", catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
  testRunner.Then("I should not see Trade Option available within the Action Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
  testRunner.When("I click on Inventory Summary tab for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
  testRunner.Then("I should see the Inventory header for Trade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
  testRunner.When("I click to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
  testRunner.Then("I should land to Trade Summary Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
  testRunner.And(string.Format("I should not see traded vehicle \"{0}\" listed on Trade Summary Page due to their C" +
                            "ategory \"{1}\"", vIN, catg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(6) As a dealer I should not be able to Trade vechicle which are already traded: " +
            "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "3MYDLBJVXLY705947")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "G")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "No Trade Required Due to already Traded")]
        public virtual void _6AsADealerIShouldNotBeAbleToTradeVechicleWhichAreAlreadyTraded_TC01()
        {
#line 81
 this._6AsADealerIShouldNotBeAbleToTradeVechicleWhichAreAlreadyTraded("TC01", "3MYDLBJVXLY705947", "G", "42095", "", "No", "No Trade Required Due to already Traded", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(6) As a dealer I should not be able to Trade vechicle which are already traded: " +
            "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DD365 Trade Tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DD365")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tc:06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TestCase", "TC02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:VIN", "NMTKHMBX6LR118363")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Catg", "A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerToTrade", "42095")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DealerNote", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TradePopupRequired", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedTrade", "No Trade Required Due to already Traded")]
        public virtual void _6AsADealerIShouldNotBeAbleToTradeVechicleWhichAreAlreadyTraded_TC02()
        {
#line 81
 this._6AsADealerIShouldNotBeAbleToTradeVechicleWhichAreAlreadyTraded("TC02", "NMTKHMBX6LR118363", "A", "42095", "", "No", "No Trade Required Due to already Traded", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
